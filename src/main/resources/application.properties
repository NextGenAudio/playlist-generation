# ============ Database Configuration ============
# Supabase PostgreSQL Connection

spring.datasource.primary.driver-class-name=org.postgresql.Driver
spring.datasource.primary.jdbc-url=jdbc:postgresql://db.pawgoznulwghxjjhjmfu.supabase.co:5432/postgres?user=postgres&password=Zaq12345#
#spring.datasource.primary.url=jdbc:postgresql://db.pawgoznulwghxjjhjmfu.supabase.co:5432/postgres?user=postgres&password=Zaq12345#
spring.datasource.primary.username=postgres
spring.datasource.primary.password=Zaq12345#


# --- Secondary Database ---
spring.datasource.secondary.driver-class-name=org.postgresql.Driver
spring.datasource.secondary.jdbc-url=jdbc:postgresql://db.roufeipnmkaiurzklqar.supabase.co:5432/postgres?user=postgres&password=XEAt1wqMFTANz6Xo
spring.datasource.secondary.username=postgres
spring.datasource.secondary.password=XEAt1wqMFTANz6Xo

# Connection pool settings for better stability
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1800000

# ============ JPA/Hibernate Configuration ============
# Temporarily use 'create-drop' to fix schema issues, then change back to 'validate'
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true
spring.jpa.open-in-view=false

# ============ Server Configuration ============
server.port=8082
server.servlet.context-path=/playlist-service

# ============ Inter-Service Communication ============
# Music Library Service Configuration
music.library.service.url=http://localhost:8080
music.library.service.timeout.connect=10000
music.library.service.timeout.read=30000

# Recommendation Service Configuration
recommendation.service.url=http://localhost:8081
recommendation.service.timeout.connect=10000
recommendation.service.timeout.read=30000

# API Gateway Configuration
api.gateway.url=http://localhost:8000

# ============ Kafka Configuration ============
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=playlist-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# ============ AI Features Configuration ============
# AI Recommendation Settings
ai.recommendation.enabled=true
ai.recommendation.default.max-tracks=25
ai.recommendation.confidence.threshold=0.6
ai.recommendation.cache.ttl=3600

# Smart Playlist Settings
ai.smart-playlist.enabled=true
ai.smart-playlist.default.track-count=25
ai.smart-playlist.regeneration.interval=24

# ============ File Upload Configuration ============
# Playlist Cover Upload Settings
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# File Storage Configuration
file.storage.playlist-covers.path=/uploads/playlist-covers/
file.storage.playlist-covers.max-size=10485760

# ============ Security Configuration ============
# JWT Configuration
jwt.secret=your-secret-key-here
jwt.expiration=86400000

# CORS Configuration
cors.allowed-origins=http://localhost:3000,http://localhost:3001
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed-headers=*
cors.allow-credentials=true

# ============ Caching Configuration ============
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=1000,expireAfterWrite=10m

# ============ Logging Configuration ============
logging.level.io.NextGenAudio=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# ============ Monitoring and Health ============
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.enable.all=true

# ============ Application Information ============
spring.application.name=playlist-service
spring.profiles.active=development

# ============ Performance Configuration ============
# Connection Pool for REST calls
http.client.connection-pool.max-total=200
http.client.connection-pool.default-max-per-route=50
http.client.connection-pool.connection-timeout=10000
http.client.connection-pool.socket-timeout=30000

# ============ Business Logic Configuration ============
# Playlist Limits
playlist.limits.max-playlists-per-user=500
playlist.limits.max-tracks-per-playlist=10000
playlist.limits.max-name-length=100
playlist.limits.max-description-length=500

# Track Management
track.validation.enabled=true
track.metadata.cache.enabled=true
track.metadata.cache.ttl=7200

# AI Processing
ai.processing.async=true
ai.processing.timeout=60000
ai.processing.retry.max-attempts=3


nextauth.session-url=http://localhost:3000/api/auth/session